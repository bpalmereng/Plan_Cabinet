name: Publish Win-x64 with App Installer

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Windows MAUI workloads
        run: dotnet workload install maui-windows --include-previews

      - name: Import Signing Certificate
        shell: pwsh
        run: |
          $pfx_base64 = "${{ secrets.PFX_CERTIFICATE_BASE64 }}"
          $pfx_password = "${{ secrets.PFX_PASSWORD }}"
          $pfx_bytes = [System.Convert]::FromBase64String($pfx_base64)
          [System.IO.File]::WriteAllBytes("cert.pfx", $pfx_bytes)
          $pfx_password_secure = ConvertTo-SecureString -String $pfx_password -AsPlainText -Force
          Import-PfxCertificate -FilePath "cert.pfx" -CertStoreLocation Cert:\CurrentUser\My -Password $pfx_password_secure

      - name: Build and Package MAUI App for Windows
        shell: pwsh
        run: |
          # Use the GitHub Actions run number for the app version
          $appVersion = "1.0.$($env:GITHUB_RUN_NUMBER).0"
          
          dotnet publish -f net8.0-windows10.0.22000.0 -c Release -p:WindowsPackageType=MSIX -p:RuntimeIdentifier=win-x64 -p:Platform=x64 -p:PublishReadyToRun=false -p:ApplicationVersion=$appVersion --self-contained true

      - name: Find Installer Package
        id: find_bundle
        shell: pwsh
        run: |
          $file = Get-ChildItem "Plan_Cabinet/bin/x64/Release/net8.0-windows10.0.22000.0/win-x64/AppPackages" -Recurse -Include *.msixbundle,*.msix | Where-Object { $_.DirectoryName -notlike "*Dependencies*" } | Select-Object -First 1
          if (-not $file) { Write-Error "❌ No installer package found!"; exit 1 }
          echo "bundle_path=$($file.FullName)" >> $env:GITHUB_OUTPUT

      - name: Generate App Installer
        id: generate_installer
        shell: pwsh
        run: |
          $appDir = Split-Path "${{ steps.find_bundle.outputs.bundle_path }}" -Parent
          $appxFilename = [System.IO.Path]::GetFileName("${{ steps.find_bundle.outputs.bundle_path }}")
          
          $cer = Get-ChildItem $appDir -Filter "*.cer" | Select-Object -First 1
          if (-not $cer) { Write-Error "❌ No certificate (.cer) found"; exit 1 }
          
          $version = ($appxFilename -split "_")[1]
          
          # Using hardcoded values from your csproj to avoid build issues
          $packageName = "com.companyname.plan_cabinet"
          $publisherName = "CN=Brian Palmer - TCPW"

          $appInstallerPath = Join-Path $appDir "Plan_Cabinet.appinstaller"
          $msixUri = "https://bpalmereng.github.io/Plan_Cabinet/$appxFilename"
          $appInstallerXml = @"
          <?xml version="1.0" encoding="utf-8"?>
          <AppInstaller Uri="$msixUri" Version="$version" xmlns="http://schemas.microsoft.com/appx/appinstaller/2017/2">
            <MainPackage Name="$packageName" Publisher="$publisherName" Version="$version" Uri="$msixUri" />
            <UpdateSettings>
              <OnLaunch HoursBetweenUpdateChecks="0" />
              <AutomaticBackgroundTask />
            </UpdateSettings>
            <Dependencies>
              <Package Name="Microsoft.WindowsAppRuntime.1.4" Publisher="CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US" Version="404.41208.0" />
            </Dependencies>
          </AppInstaller>
          "@
          Set-Content -Path $appInstallerPath -Value $appInstallerXml -Encoding UTF8
          
          echo "installer_path=$appInstallerPath" >> $env:GITHUB_OUTPUT
          echo "cer_path=$($cer.FullName)" >> $env:GITHUB_OUTPUT
          echo "appx_path=${{ steps.find_bundle.outputs.bundle_path }}" >> $env:GITHUB_OUTPUT

      - name: Upload Artifacts to GitHub Pages
        uses: actions/upload-artifact@v4
        with:
          name: AppInstaller-Files
          path: |
            ${{ steps.find_bundle.outputs.bundle_path }}
            ${{ steps.generate_installer.outputs.installer_path }}
            ${{ steps.generate_installer.outputs.cer_path }}
          retention-days: 7

  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: AppInstaller-Files
      
      - name: Create index.html with download link
        run: |
          FILE=$(ls *.appinstaller 2>/dev/null | head -n 1)
          echo "<html><body><h1>Plan_Cabinet App Installer</h1><p>Click <a href=\"$FILE\">here to install</a> and update the app.</p></body></html>" > index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4