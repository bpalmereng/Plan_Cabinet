name: Publish Win-x64 with ReadyToRun

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Windows MAUI workloads
        run: dotnet workload install maui-windows --include-previews

      - name: Import Signing Certificate
        shell: pwsh
        run: |
          $pfx_base64 = "${{ secrets.PFX_CERTIFICATE_BASE64 }}"
          $pfx_password = "${{ secrets.PFX_PASSWORD }}"
          $pfx_bytes = [System.Convert]::FromBase64String($pfx_base64)
          [System.IO.File]::WriteAllBytes("cert.pfx", $pfx_bytes)
          $pfx_password_secure = ConvertTo-SecureString -String $pfx_password -AsPlainText -Force
          Import-PfxCertificate -FilePath "cert.pfx" -CertStoreLocation Cert:\CurrentUser\My -Password $pfx_password_secure

      - name: Build and Package MAUI App for Windows
        shell: pwsh
        run: |
          $buildNumber = $env:GITHUB_RUN_NUMBER
          $displayVersion = "1.0.$buildNumber"
          $appVersion = "1.$buildNumber"
          
          dotnet publish "Plan_Cabinet/Plan_Cabinet.csproj" `
            -f net8.0-windows10.0.22000.0 `
            -c Release `
            --runtime win-x64 `
            --self-contained true `
            /p:PublishReadyToRun=true `
            /p:Platform=x64 `
            /p:AppxPackageSigningEnabled=true `
            /p:AppxBundle=Always `
            /p:AppxBundlePlatforms=x64 `
            /p:ApplicationDisplayVersion=$displayVersion `
            /p:ApplicationVersion=$appVersion
        env:
          GRAPH_CLIENT_ID: ${{ secrets.GRAPH_CLIENT_ID }}
          GRAPH_TENANT_ID: ${{ secrets.GRAPH_TENANT_ID }}
          GRAPH_CLIENT_SECRET: ${{ secrets.GRAPH_CLIENT_SECRET }}
          GRAPH_DRIVE_ID: ${{ secrets.GRAPH_DRIVE_ID }}

      - name: Find Installer Package
        id: find_bundle
        shell: pwsh
        run: |
          $file = Get-ChildItem "Plan_Cabinet/bin/x64/Release/net8.0-windows10.0.22000.0/win-x64/AppPackages" -Recurse -Include *.msixbundle | Select-Object -First 1
          if (-not $file) {
              $file = Get-ChildItem "Plan_Cabinet/bin/x64/Release/net8.0-windows10.0.22000.0/win-x64/AppPackages" -Recurse -Include *.msix | Where-Object { $_.BaseName -notlike "*Dependencies*" } | Select-Object -First 1
          }
          if (-not $file) { Write-Error "❌ No installer package found!"; exit 1 }
          echo "bundle_path=$($file.FullName)" >> $env:GITHUB_OUTPUT

      - name: Bundle Installer Files and Generate .appinstaller
        id: bundle
        shell: pwsh
        run: |
          $appDir = Split-Path "${{ steps.find_bundle.outputs.bundle_path }}" -Parent
          Write-Host "App directory: $appDir"

          $msix = Get-ChildItem $appDir -Filter "*.msix" | Select-Object -First 1
          $cer  = Get-ChildItem $appDir -Filter "*.cer" | Select-Object -First 1
          $msixbundle = Get-ChildItem $appDir -Filter "*.msixbundle" | Select-Object -First 1

          if ($msixbundle) {
              $appxFilename = $msixbundle.Name
          } elseif ($msix) {
              $appxFilename = $msix.Name
          } else {
              Write-Error "❌ No MSIX or MSIXBUNDLE found"; exit 1
          }

          if (-not $cer)  { Write-Error "❌ No certificate (.cer) found"; exit 1 }

          # Use GitHub run number for version
          $buildNumber = $env:GITHUB_RUN_NUMBER
          $version = "1.0.$buildNumber.0"

          # Generate .appinstaller file
          $appInstallerPath = Join-Path $appDir "Plan_Cabinet.appinstaller"
          $msixUri = "https://bpalmereng.github.io/Plan_Cabinet/$appxFilename"
          $appInstallerXml = @"
          <?xml version="1.0" encoding="utf-8"?>
          <AppInstaller Uri="$msixUri" Version="$version" xmlns="http://schemas.microsoft.com/appx/appinstaller/2017/2">
          <MainPackage Name="PlanCabinet" Publisher="CN=Brian Palmer - TCPW" Version="$version" Uri="$msixUri" />
          <UpdateSettings>
          <OnLaunch HoursBetweenUpdateChecks="0" />
          <AutomaticBackgroundTask />
          </UpdateSettings>
          </AppInstaller>
          "@
          Set-Content -Path $appInstallerPath -Value $appInstallerXml -Encoding UTF8

          # PowerShell installer script
          $psScript = @"
          Write-Host 'Installing certificate...'
          `$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2('.\$($cer.Name)')
          `$store = New-Object System.Security.Cryptography.X509Certificates.X509Store('TrustedPeople', 'CurrentUser')
          `$store.Open('ReadWrite')
          `$existing = `$store.Certificates | Where-Object { `$_.Thumbprint -eq `$cert.Thumbprint }
          foreach (`$c in `$existing) { `$store.Remove(`$c) }
          `$store.Add(`$cert)
          `$store.Close()
          Write-Host 'Certificate installed'
          Write-Host 'Installing app package...'
          Add-AppxPackage -Path '.\$($appxFilename)' -ForceApplicationShutdown
          Write-Host 'App installed successfully!'
          "@
          Set-Content -Path "$appDir\Install-App.ps1" -Value $psScript -Encoding UTF8

          # Batch installer
          $batScript = @"
          @echo off
          powershell -ExecutionPolicy Bypass -File "%~dp0Install-App.ps1"
          pause
          "@
          Set-Content -Path "$appDir\Install-App.bat" -Value $batScript -Encoding ASCII

          # Zip all installer files
          $zipPath = "$appDir\Plan_Cabinet_Installer.zip"
          Add-Type -AssemblyName 'System.IO.Compression.FileSystem'
          [System.IO.Compression.ZipFile]::CreateFromDirectory($appDir, $zipPath)

          echo "bundle_zip=$zipPath" >> $env:GITHUB_OUTPUT

      - name: Upload Installer Zip
        uses: actions/upload-artifact@v4
        with:
          name: Plan_Cabinet-Installer-Bundle
          path: ${{ steps.bundle.outputs.bundle_zip }}
          retention-days: 7

  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Plan_Cabinet-Installer-Bundle

      - name: Create index.html with download link
        run: |
          FILE=$(ls *.zip 2>/dev/null | head -n 1)
          echo "<html><body><h1>Plan_Cabinet Installer</h1><p><a href=\"$FILE\">Download Installer</a></p></body></html>" > index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
