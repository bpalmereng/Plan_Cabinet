name: Publish Win-x64 with ReadyToRun

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Windows MAUI workloads
        run: dotnet workload install maui-windows --include-previews

      - name: Restore dependencies for Windows build
        run: dotnet restore "Plan_Cabinet/Plan_Cabinet.csproj" --runtime win-x64 /p:PublishReadyToRun=true

      - name: Import Signing Certificate
        shell: pwsh
        run: |
          $pfx_base64 = "${{ secrets.PFX_CERTIFICATE_BASE64 }}"
          $pfx_password = "${{ secrets.PFX_PASSWORD }}"
          $pfx_bytes = [System.Convert]::FromBase64String($pfx_base64)
          [System.IO.File]::WriteAllBytes("cert.pfx", $pfx_bytes)
          $pfx_password_secure = ConvertTo-SecureString -String $pfx_password -AsPlainText -Force
          Import-PfxCertificate -FilePath "cert.pfx" -CertStoreLocation Cert:\CurrentUser\My -Password $pfx_password_secure

      - name: Build and Package MAUI App for Windows
        working-directory: Plan_Cabinet
        run: dotnet publish Plan_Cabinet.csproj -f net8.0-windows10.0.22000.0 -c Release --runtime win-x64 --self-contained true /p:PublishReadyToRun=false /p:Platform=x64 /p:AppxPackageSigningEnabled=true /p:AppxBundle=Always /p:AppxBundlePlatforms=x64

        env:
          GRAPH_CLIENT_ID: ${{ secrets.GRAPH_CLIENT_ID }}
          GRAPH_TENANT_ID: ${{ secrets.GRAPH_TENANT_ID }}
          GRAPH_CLIENT_SECRET: ${{ secrets.GRAPH_CLIENT_SECRET }}
          GRAPH_DRIVE_ID: ${{ secrets.GRAPH_DRIVE_ID }}

      - name: Debug & Find Installer Package
        id: find_bundle
        shell: bash
        run: |
          PUBLISH_DIR="$GITHUB_WORKSPACE/Plan_Cabinet/bin/x64/Release/net8.0-windows10.0.22000.0/win-x64/AppPackages"
          echo "Listing all files in: $PUBLISH_DIR"
          find "$PUBLISH_DIR" -type d -print0 | while IFS= read -r -d '' dir; do
            echo "DIR: $dir"
            ls -lh "$dir"
          done

          # Find the main app MSIX/MSIXBUNDLE (not Dependencies)
          FILE=$(find "$PUBLISH_DIR" -maxdepth 2 -type f -name "Plan_Cabinet_*.msix*" | head -n 1)
          if [ -z "$FILE" ]; then
            echo "❌ ERROR: No MSIX or MSIXBUNDLE installer found in $PUBLISH_DIR"
            exit 1
          else
            echo "✅ Installer found: $FILE"
          fi

          echo "bundle_path=$FILE" >> $GITHUB_OUTPUT

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Plan_Cabinet-installer
          path: ${{ steps.find_bundle.outputs.bundle_path }}
          retention-days: 7

  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Plan_Cabinet-installer

      - name: Create index.html with download link
        run: |
          FILE=$(ls *.msixbundle *.msix 2>/dev/null | head -n 1)
          echo "<html><body><h1>Plan_Cabinet Installer</h1><p><a href=\"$FILE\">Download Installer</a></p></body></html>" > index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
