name: Publish Win-x64 with ReadyToRun

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Install Windows MAUI workloads
      run: dotnet workload install maui-windows --include-previews
    
    - name: Restore dependencies for Windows build
      run: dotnet restore "Plan_Cabinet/Plan_Cabinet.csproj" --runtime win-x64 /p:PublishReadyToRun=true

    - name: Import Signing Certificate
      shell: powershell
      run: |
        $pfx_base64 = "${{ secrets.PFX_CERTIFICATE_BASE64 }}"
        $pfx_password = "${{ secrets.PFX_PASSWORD }}"
        $pfx_bytes = [System.Convert]::FromBase64String($pfx_base64)
        [System.IO.File]::WriteAllBytes("cert.pfx", $pfx_bytes)
        
        # Import the certificate into the certificate store
        $pfx_password_secure = ConvertTo-SecureString -String $pfx_password -AsPlainText -Force
        Import-PfxCertificate -FilePath "cert.pfx" -CertStoreLocation Cert:\CurrentUser\My -Password $pfx_password_secure

    - name: Build and Package MAUI App for Windows
      run: dotnet publish "Plan_Cabinet/Plan_Cabinet.csproj" -f net8.0-windows10.0.22000.0 -c Release --no-restore --runtime win-x64 --self-contained true /p:PublishReadyToRun=true /p:Platform=x64 /p:AppxPackageSigningEnabled=true
      env:
        GRAPH_CLIENT_ID: ${{ secrets.GRAPH_CLIENT_ID }}
        GRAPH_TENANT_ID: ${{ secrets.GRAPH_TENANT_ID }}
        GRAPH_CLIENT_SECRET: ${{ secrets.GRAPH_CLIENT_SECRET }}
        GRAPH_DRIVE_ID: ${{ secrets.GRAPH_DRIVE_ID }}
      
    - name: Find MSIX Bundle
      id: find_bundle
      shell: bash
      run: |
        BUNDLE=$(find $GITHUB_WORKSPACE/Plan_Cabinet/bin/x64/Release/net8.0-windows10.0.22000.0/win-x64/AppPackages -name "*.msixbundle" | head -n 1)
        echo "bundle_path=$BUNDLE" >> $GITHUB_OUTPUT

    - name: Upload Installer Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Plan_Cabinet-installer
        path: ${{ steps.find_bundle.outputs.bundle_path }}
        retention-days: 7

  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: Plan_Cabinet-installer

      - name: Create index.html with download link
        run: |
          FILE=$(ls *.msixbundle | head -n 1)
          echo "<html><body><h1>Plan_Cabinet Installer</h1><p><a href=\"$FILE\">Download Installer</a></p></body></html>" > index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
