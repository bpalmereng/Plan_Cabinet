name: Publish Win-x64 with App Installer

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Windows MAUI workloads
        run: dotnet workload install maui-windows --include-previews

      - name: Import Signing Certificate and get Thumbprint
        shell: pwsh
        id: get_thumbprint
        run: |
          $pfx_base64 = "${{ secrets.PFX_CERTIFICATE_BASE64 }}"
          $pfx_password = "${{ secrets.PFX_PASSWORD }}"
          $pfx_bytes = [System.Convert]::FromBase64String($pfx_base64)
          [System.IO.File]::WriteAllBytes("cert.pfx", $pfx_bytes)
          $pfx_password_secure = ConvertTo-SecureString -String $pfx_password -AsPlainText -Force
          Import-PfxCertificate -FilePath "cert.pfx" -CertStoreLocation Cert:\CurrentUser\My -Password $pfx_password_secure

          $thumbprint = (Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Subject -like "*CN=Brian Palmer - TCPW*" } | Select-Object -ExpandProperty Thumbprint)
          echo "cert_thumbprint=$thumbprint" >> $env:GITHUB_OUTPUT
          Write-Host "Certificate Thumbprint: $thumbprint"

      - name: Update AppxManifest Version
        shell: pwsh
        run: |
          $appxManifestPath = "$($env:GITHUB_WORKSPACE)\Plan_Cabinet\Platforms\Windows\Package.appxmanifest"
          $xml = [xml](Get-Content $appxManifestPath)
          $version = "1.0.$($env:GITHUB_RUN_NUMBER).0"
          $xml.Package.Identity.Version = $version
          $xml.Save($appxManifestPath)
          Write-Host "Updated AppxManifest version to: $version"

      - name: Build and Package MAUI App for Windows
        shell: pwsh
        run: |
          dotnet publish -f net8.0-windows10.0.22000.0 -c Release -p:RuntimeIdentifier=win10-x64 -p:AppxPackageDir='.\Publish' -p:AppxBundle=False -p:PublishReadyToRun=True -p:PublishSingleFile=True -p:GenerateAppInstallerFile=True -p:AppInstallerUri='https://bpalmereng.github.io/Plan_Cabinet/' -p:AppxPackageSigningEnabled=true -p:PackageCertificateThumbprint='${{ steps.get_thumbprint.outputs.cert_thumbprint }}' -p:AppxPackageUpdateUri='https://bpalmereng.github.io/Plan_Cabinet/' -p:AppInstallerUpdateFrequency=1 -p:AppInstallerCheckForUpdateFrequency=OnLaunch -p:EnableCompression=True

      - name: Find Installer Package
        id: find_bundle
        shell: pwsh
        run: |
          $file = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Include *.msixbundle,*.msix | Where-Object { $_.DirectoryName -notlike "*Dependencies*" } | Select-Object -First 1
          if (-not $file) { Write-Error "❌ No installer package found!"; exit 1 }
          echo "bundle_path=$($file.FullName)" >> $env:GITHUB_OUTPUT
          
          $cer = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Filter "*.cer" | Select-Object -First 1
          if (-not $cer) { Write-Error "❌ No certificate (.cer) found"; exit 1 }
          echo "cer_path=$($cer.FullName)" >> $env:GITHUB_OUTPUT

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4