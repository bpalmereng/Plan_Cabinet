name: Publish Win-x64 with App Installer

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Windows MAUI workloads
        run: dotnet workload install maui-windows --include-previews

      - name: Install Missing Certificates
        shell: pwsh
        run: |
          # This step addresses the "certificate chain not trusted" error by importing a known Microsoft root certificate.
          # First, download the certificate to a temporary file, as the .NET constructor does not support URLs.
          Invoke-WebRequest -Uri "https://www.microsoft.com/pkiops/certs/Microsoft%20Code%20Signing%20PCA%202011.cer" -OutFile "MicrosoftCodeSigningPCA2011.cer"
          
          # Now, load the certificate from the downloaded file and add it to the trusted store.
          $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new("MicrosoftCodeSigningPCA2011.cer")
          $store = [System.Security.Cryptography.X509Certificates.X509Store]::new([System.Security.Cryptography.X509Certificates.StoreName]::Root, [System.Security.Cryptography.X509Certificates.StoreLocation]::LocalMachine)
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
          $store.Add($cert)
          $store.Close()
          
          # Clean up the temporary file.
          Remove-Item -Path "MicrosoftCodeSigningPCA2011.cer"

      - name: Import Signing Certificate
        shell: pwsh
        run: |
          $pfx_base64 = "${{ secrets.PFX_CERTIFICATE_BASE64 }}"
          $pfx_password = "${{ secrets.PFX_PASSWORD }}"
          $pfx_bytes = [System.Convert]::FromBase64String($pfx_base64)
          [System.IO.File]::WriteAllBytes("cert.pfx", $pfx_bytes)
          $pfx_password_secure = ConvertTo-SecureString -String $pfx_password -AsPlainText -Force
          Import-PfxCertificate -FilePath "cert.pfx" -CertStoreLocation Cert:\CurrentUser\My -Password $pfx_password_secure

      - name: Build and Package MAUI App for Windows
        shell: pwsh
        run: |
          $versionNumber = (Get-Content "Plan_Cabinet.csproj" -Raw | Select-String -Pattern "<ApplicationVersion>(\d+)</ApplicationVersion>").Matches.Groups[1].Value
          dotnet publish -f net8.0-windows10.0.22000.0 -c Release `
            -p:RuntimeIdentifier=win10-x64 `
            -p:AppxPackageSigningEnabled=true `
            -p:PackageCertificateThumbprint="$(Get-PfxCertificate -FilePath "cert.pfx" | Select-Object -ExpandProperty Thumbprint)" `
            -p:GenerateAppxPackageOnBuild=true `
            -p:EnableCompression=true `
            -p:AppxAutoIncrementPackageRevision=True `
            -p:AppxPublishInstaller=true `
            -p:AppxInstallerUri="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" `
            -p:AppxInstallerUpdateUri="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" `
            -p:AppxPackageDir="AppPackages\"

      - name: Find and set output variables for generated files
        id: find_bundle
        shell: pwsh
        run: |
          $appInstallerFile = Get-ChildItem -Path "AppPackages" -Recurse -Filter "*.appinstaller" | Select-Object -First 1
          if ($null -eq $appInstallerFile) {
            Write-Error "No .appinstaller file found."
            exit 1
          }
          $appxBundleFile = Get-ChildItem -Path "AppPackages" -Recurse -Filter "*.msix" | Select-Object -First 1
          if ($null -eq $appxBundleFile) {
            Write-Error "No .msix file found."
            exit 1
          }
          $certFile = Get-ChildItem -Path "AppPackages" -Recurse -Filter "*.cer" | Select-Object -First 1
          if ($null -eq $certFile) {
            Write-Error "No .cer file found."
            exit 1
          }
          echo "appinstaller_path=$($appInstallerFile.FullName)" >> $env:GITHUB_OUTPUT
          echo "bundle_path=$($appxBundleFile.FullName)" >> $env:GITHUB_OUTPUT
          echo "cer_path=$($certFile.FullName)" >> $env:GITHUB_OUTPUT
          echo "appinstaller_name=$($appInstallerFile.Name)" >> $env:GITHUB_OUTPUT
          echo "cer_name=$($certFile.Name)" >> $env:GITHUB_OUTPUT

      - name: Upload Artifacts to GitHub Pages
        uses: actions/upload-artifact@v4
        with:
          name: AppInstaller-Files
          path: |
            ${{ steps.find_bundle.outputs.bundle_path }}
            ${{ steps.find_bundle.outputs.appinstaller_path }}
            ${{ steps.find_bundle.outputs.cer_path }}
          retention-days: 7

  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: AppInstaller-Files

      - name: Create installer guide
        run: |
          cat <<'EOF' > Certificate_Install_Guide.md
          # Certificate and App Installation Guide

          This guide will walk you through the process of installing the required developer certificate and the Plan_Cabinet application. This is a
          one-time process to ensure that your system trusts the application.

          ## Step 1: Install the Certificate

          1.  **Download the Certificate:** Click the "Download Certificate" button on the installation page. The file name will be `Plan_Cabinet.cer`.
          2.  **Open the Certificate:** Locate the downloaded `.cer` file and double-click it. This will open the Certificate window.
          3.  **Choose "Install Certificate":** In the window, click on the **"Install Certificate..."** button.
          4.  **Select "Local Machine":** A new wizard will open. In the first step, select **"Local Machine"** as the store location. This is very important! Click **"Next"**.
          5.  **Place the Certificate:** In the next step, select **"Place all certificates in the following store"**. Click the **"Browse..."** button.
          6.  **Choose the Store:** From the list, find and select **"Trusted People"**. Click **"OK"** and then **"Next"**.
          7.  **Complete Installation:** Click **"Finish"**. You will receive a security warning; confirm it to complete the installation.

          ## Step 2: Install the Application

          1.  **Return to the Installation Page:** Go back to the web page you were on.
          2.  **Click "Install App":** Now that the certificate is trusted, click the **"Install App"** button. This will launch the Microsoft App Installer.
          3.  **Follow the Prompts:** The App Installer will guide you through the final steps of installing the application.

          If you encounter any issues, please ensure the certificate was installed correctly for the "Local Machine" in the "Trusted People" store.
          EOF

      - name: Create index.html with download link
        run: |
          APPINSTALLER_FILE=$(ls *.appinstaller 2>/dev/null | head -n 1)
          CERTIFICATE_FILE=$(ls *.cer 2>/dev/null | head -n 1)
          
          if [ -z "$APPINSTALLER_FILE" ] || [ -z "$CERTIFICATE_FILE" ]; then
            echo "Error: App installer or certificate file not found."
            exit 1
          fi

          echo "Writing index.html with App Installer file: $APPINSTALLER_FILE"
          
          cat <<EOF > index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Plan_Cabinet App Installation</title>
          <style>
          body { font-family: sans-serif; line-height: 1.6; max-width: 800px; margin: auto; padding: 20px; background-color: #f0f4f8; color: #333; }
          .container { background-color: #fff; padding: 30px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); border: 1px solid #e2e8f0; }
          h1 { color: #2a4365; text-align: center; margin-bottom: 20px; }
          .instructions { background-color: #ebf8ff; border-left: 5px solid #4299e1; padding: 20px; margin-top: 20px; border-radius: 8px; }
          .instructions p { margin: 0 0 15px 0; }
          ol { padding-left: 25px; }
          ol li { margin-bottom: 15px; }
          .step-link { display: inline-block; padding: 12px 24px; background-color: #4299e1; color: white; text-decoration: none; border-radius: 9999px; font-weight: bold; text-align: center; transition: background-color 0.3s ease; }
          .step-link:hover { background-color: #3182ce; }
          .warning { color: #e53e3e; font-weight: bold; margin-top: 10px; }
          footer { text-align: center; margin-top: 30px; font-size: 0.8em; color: #718096; }
          </style>
          </head>
          <body>
          <div class="container">
          <h1>Plan_Cabinet App Installation</h1>
          <div class="instructions">
            <p>To install the app, you must first trust the developer's certificate. Please follow these two simple steps in order:</p>
            <ol>
                <li>
                    <strong>Step 1: Download and Install the Certificate</strong>
                    <p>Click the link below to download the certificate file (`.cer`). After downloading, open the file and follow the prompts to install it. It is crucial to install it into the <strong>"Trusted People"</strong> or <strong>"Trusted Root Certification Authorities"</strong> certificate store for the <strong>"Local Machine"</strong>.</p>
                    <p class="warning">Warning: The installation will not work if the certificate is not properly installed and trusted.</p>
                    <a href="$CERTIFICATE_FILE" class="step-link" download>Download Certificate</a>
                </li>
                <li>
                    <strong>Step 2: Install the Application</strong>
                    <p>Once the certificate is successfully installed, click the link below to install the application. This will launch the Microsoft App Installer to guide you through the process.</p>
                    <a href="ms-appinstaller:?source=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$APPINSTALLER_FILE" class="step-link">Install App</a>
                </li>
            </ol>
          </div>
          <footer>
            <p>This page is automatically generated by GitHub Actions.</p>
          </footer>
          </div>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload pages
        uses: actions/upload-pages@v5
        with:
          path: '.'